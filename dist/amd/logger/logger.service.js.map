{"version":3,"sources":["logger/logger.service.ts","logger/logger.service.js"],"names":["LoggerService","LoggerService.constructor","LoggerService.log","Logger","Logger.constructor","Logger.debug","Logger.info","Logger.error","Logger.warn","Logger._log","loggerFactory"],"mappings":"AAAA;ACCA,OAAO,CAAC,WAAW,YAAY,UAAU,SAAS,SAAS;IDG3D,IAAA,gBAAA,CAAA,YAAA;;QAICA,SAAAA,cACSA,MAAoBA;YAApBC,KAAAA,OAAAA;;;QAKTD,cAAAA,UAAAA,MAAAA,UAAIA,SAAkBA,SAAiBA,MAAUA;YAChDE,QAAQA;gBAEPA,KAAKA;oBACJA,KAAKA,KAAKA,MAAMA,SAASA;oBACzBA;gBACDA,KAAKA;oBACJA,KAAKA,KAAKA,KAAKA,SAASA;oBACxBA;gBACDA,KAAKA;oBACJA,KAAKA,KAAKA,MAAMA,SAASA;oBACzBA;gBACDA,KAAKA;oBACJA,KAAKA,KAAKA,KAAKA,SAASA;oBACxBA;gBACDA;oBACCA,KAAKA,KAAKA,IAAIA,SAASA;oBACvBA;;;QA1BIF,cAAAA,KAAKA;QA6BbA,OAAAA;;IA9Ba,QAAA,gBAAa;IAgC1B,IAAA,SAAA,CAAA,YAAA;QAECG,SAAAA,OACSA,UACAA,eAA4BA;YAD5BC,KAAAA,WAAAA;YACAA,KAAAA,gBAAAA;;QAKTD,OAAAA,UAAAA,QAAAA,UAAMA,QAAgBA,SAAkBA,MAAUA;YACjDE,KAAKA,KAAKA,KAAKA,UAAUA,QAAQA,eAAeA,SAASA;;QAG1DF,OAAAA,UAAAA,OAAAA,UAAKA,QAAgBA,SAAkBA,MAAUA;YAChDG,KAAKA,KAAKA,KAAKA,UAAUA,QAAQA,cAAcA,SAASA;;QAGzDH,OAAAA,UAAAA,QAAAA,UAAMA,QAAgBA,SAAkBA,MAAUA;YACjDI,KAAKA,KAAKA,KAAKA,UAAUA,QAAQA,eAAeA,SAASA;;QAG1DJ,OAAAA,UAAAA,OAAAA,UAAKA,QAAgBA,SAAkBA,MAAUA;YAChDK,KAAKA,KAAKA,KAAKA,UAAUA,QAAQA,iBAAiBA,SAASA;;QAGpDL,OAAAA,UAAAA,OAARA,UAAaA,UAAkBA,QAAgBA,SAAkBA,SAAkBA,MAAUA;YAC5FM,IAAIA,MAAMA,MAAIA,WAAQA,OAAKA,SAAMA,OAAKA;YACtCA,KAAKA,cAAcA,IAAIA,SAASA,KAAKA;;QAGvCN,OAAAA;;IA9Ba,QAAA,SAAM;;IAqCnB,SAAA,cAA8B,eAA4B;QACzDO,OAAOA,UAACA,UAAgBA;YACvBA,OAAOA,IAAIA,OAAOA,UAAUA;;;;IAFd,QAAA,gBAAa;;ACX7B","file":"logger/logger.service.js","sourcesContent":["// reference: https://github.com/stephenlautier/angular-typescript/blob/master/app/services/logger.svc.ts\r\n\r\nimport {ILog, LogType} from \"./logger.model\";\r\n\r\nexport class LoggerService {\r\n\tstatic id = \"loggerService\";\r\n\r\n\t/*@ngInject*/\r\n\tconstructor(\r\n\t\tprivate $log: ng.ILogService\r\n\t) {\r\n\r\n\t}\r\n\r\n\tlog(logType: LogType, message: string, data?: any): void {\r\n\t\tswitch (logType) {\r\n\r\n\t\t\tcase LogType.Debug:\r\n\t\t\t\tthis.$log.debug(message, data);\r\n\t\t\t\tbreak;\r\n\t\t\tcase LogType.Info:\r\n\t\t\t\tthis.$log.info(message, data);\r\n\t\t\t\tbreak;\r\n\t\t\tcase LogType.Error:\r\n\t\t\t\tthis.$log.error(message, data);\r\n\t\t\t\tbreak;\r\n\t\t\tcase LogType.Warning:\r\n\t\t\t\tthis.$log.warn(message, data);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.$log.log(message, data);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class Logger implements ILog {\r\n\r\n\tconstructor(\r\n\t\tprivate sourceId: string,\r\n\t\tprivate loggerService: LoggerService\r\n\t) {\r\n\r\n\t}\r\n\r\n\tdebug(source: string, message?: string, data?: any) {\r\n\t\tthis._log(this.sourceId, source, LogType.Debug, message, data);\r\n\t}\r\n\r\n\tinfo(source: string, message?: string, data?: any) {\r\n\t\tthis._log(this.sourceId, source, LogType.Info, message, data);\r\n\t}\r\n\r\n\terror(source: string, message?: string, data?: any) {\r\n\t\tthis._log(this.sourceId, source, LogType.Error, message, data);\r\n\t}\r\n\r\n\twarn(source: string, message?: string, data?: any) {\r\n\t\tthis._log(this.sourceId, source, LogType.Warning, message, data);\r\n\t}\r\n\r\n\tprivate _log(sourceId: string, source: string, logType: LogType, message?: string, data?: any) {\r\n\t\tlet msg = `[${sourceId}::${source}] ${message}`;\r\n\t\tthis.loggerService.log(logType, msg, data);\r\n\t}\r\n\r\n}\r\n\r\nexport interface ILoggerFactory {\r\n\t(sourceId: string): ILog;\r\n}\r\n\r\n/*@ngInject*/\r\nexport function loggerFactory(loggerService: LoggerService) {\r\n\treturn (sourceId: string): ILog => {\r\n\t\treturn new Logger(sourceId, loggerService);\r\n\t};\r\n}\r\n","// reference: https://github.com/stephenlautier/angular-typescript/blob/master/app/services/logger.svc.ts\ndefine([\"require\", \"exports\"], function (require, exports) {\n    var LoggerService = (function () {\n        /*@ngInject*/\n        function LoggerService($log) {\n            this.$log = $log;\n        }\n        LoggerService.prototype.log = function (logType, message, data) {\n            switch (logType) {\n                case 0 /* Debug */:\n                    this.$log.debug(message, data);\n                    break;\n                case 1 /* Info */:\n                    this.$log.info(message, data);\n                    break;\n                case 3 /* Error */:\n                    this.$log.error(message, data);\n                    break;\n                case 2 /* Warning */:\n                    this.$log.warn(message, data);\n                    break;\n                default:\n                    this.$log.log(message, data);\n                    break;\n            }\n        };\n        LoggerService.id = \"loggerService\";\n        return LoggerService;\n    })();\n    exports.LoggerService = LoggerService;\n    var Logger = (function () {\n        function Logger(sourceId, loggerService) {\n            this.sourceId = sourceId;\n            this.loggerService = loggerService;\n        }\n        Logger.prototype.debug = function (source, message, data) {\n            this._log(this.sourceId, source, 0 /* Debug */, message, data);\n        };\n        Logger.prototype.info = function (source, message, data) {\n            this._log(this.sourceId, source, 1 /* Info */, message, data);\n        };\n        Logger.prototype.error = function (source, message, data) {\n            this._log(this.sourceId, source, 3 /* Error */, message, data);\n        };\n        Logger.prototype.warn = function (source, message, data) {\n            this._log(this.sourceId, source, 2 /* Warning */, message, data);\n        };\n        Logger.prototype._log = function (sourceId, source, logType, message, data) {\n            var msg = \"[\" + sourceId + \"::\" + source + \"] \" + message;\n            this.loggerService.log(logType, msg, data);\n        };\n        return Logger;\n    })();\n    exports.Logger = Logger;\n    /*@ngInject*/\n    function loggerFactory(loggerService) {\n        return function (sourceId) {\n            return new Logger(sourceId, loggerService);\n        };\n    }\n    exports.loggerFactory = loggerFactory;\n});\n"],"sourceRoot":"/source/"}